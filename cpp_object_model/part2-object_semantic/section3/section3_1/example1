#include <iostream>
 
using namespace std;
 
class X
{
public:
	int m_i;
	X(const X& tmpx)
	{
		m_i = tmpx.m_i;
		cout << "X类的拷贝构造函数被调用" << endl;
	}
	X()
	{
		m_i = 0;
		cout << "X类的构造函数被调用" << endl;
	}
 
};
 
int main()
{
	X x0;
	x0.m_i = 15;
	X x1 = x0;
	X x2(x0);
	X x3 = x0;
 
 
	// 编译器对于 X x3 = x0; 的处理步骤
	// // 步骤一：定义一个对象，为对象分配内存，但这里编译器内部并没有调用构造函数。
	// // 如果以编译器的眼光看 X x3，则不会调用构造函数，除非编译器主动增加这种 x3.X::X(); 这种代码行到现有的代码中
	// X x3;
	// //步骤二：直接调用对象的拷贝构造函数
	// x3.X::X(x0);
	return 0;
 
}
/**
 * 结果
 * X类的构造函数被调用
 * X类的拷贝构造函数被调用
 * X类的拷贝构造函数被调用
 * X类的拷贝构造函数被调用
 */