#include <iostream>
 
using namespace std;
 
class X
{
public:
	int m_i;
	X(const X& tmpx)
	{
		m_i = tmpx.m_i;
		cout << "X类的拷贝构造函数被调用" << endl;
	}
	X() 
	{
		m_i = 0;
		cout << "X类的构造函数被调用" << endl;
	}
	~X()
	{
		cout << "X类的析构函数被调用" << endl;
	}
	X(int value) :m_i(value)
	{
		cout << "X类的X(int)构造函数被调用" << endl;
	}
};
 
int main()
{
	{
		cout << "----begin----" << endl;
		X x10(1000);
		//	//编译器视角
		//	X x10;   		// 编译器视角是不调用构造函数的
		//	x10.X::X(1000);
		cout << "--------" << endl;
		// 此处设计隐式类型转换
		X x11 = 1000;
		//	//编译器视角
		//	X _tmp0;          //编译器生成的临时对象
		//	_tmp0.X::X(1000); //带一个参数的构造函数被调用
		//	X x11; 
		//	x11.X::X(_tmp0);  //拷贝构造函数被调用
		//	_tmp0.X::~X();    //调用析构
		cout << "--------" << endl;
		X x12 = X(1000);
		//	//编译器视角
		//	X _tmp0;          //编译器生成的临时对象
		//	_tmp0.X::X(1000); //带一个参数的构造函数被调用
		//	X x12; 
		//	x12.X::X(_tmp0);  //拷贝构造函数被调用
		//	_tmp0.X::~X();    //调用析构
		cout << "--------" << endl;
		X x13 = (X)1000;
		//	//编译器视角
		//	X _tmp0;          //编译器生成的临时对象
		//	_tmp0.X::X(1000); //带一个参数的构造函数被调用
		//	X x13; 
		//	x13.X::X(_tmp0);  //拷贝构造函数被调用
		//	_tmp0.X::~X();    //调用析构
		cout << "----end----" << endl;
	}
 
	return 0;
 
}
/**
 * 结果
 * ----begin----
 * X类的X(int)构造函数被调用
 * --------
 * X类的X(int)构造函数被调用
 * X类的拷贝构造函数被调用
 * X类的析构函数被调用
 * --------
 * X类的X(int)构造函数被调用
 * X类的拷贝构造函数被调用
 * X类的析构函数被调用
 * --------
 * X类的X(int)构造函数被调用
 * X类的拷贝构造函数被调用
 * X类的析构函数被调用
 * --------
 * X类的析构函数被调用
 * X类的析构函数被调用
 * X类的析构函数被调用
 * X类的析构函数被调用
 */